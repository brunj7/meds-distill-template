{
  "articles": [
    {
      "path": "assignments.html",
      "title": "Assignments",
      "author": [],
      "contents": "\n\nContents\nAssignment materials and dates\nAssignment expectations and grading\n\n\n\nTO UPDATE THIS PAGE: Open and edit the assignments.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nAssignment materials and dates\nAssignment materials\nAssigned\nDue date\nA link to the repo\n2021-01-01\n2021-01-08\nA link to the repo\n2021-01-15\n2021-01-23\nA link to the repo\n2021-02-01\n2021-02-09\nA link to the repo\n2021-02-14\n2021-02-23\nAssignment expectations and grading\nThis might also go on the home page & in syllabus\nOr could reinforce here\n\n\n\n\n",
      "last_modified": "2021-04-29T13:33:13-07:00"
    },
    {
      "path": "day_1.html",
      "title": "Scientific programming for reproducible research",
      "author": [],
      "contents": "\n\nContents\nWhy\nHow\nScripting languages\nFurther reading\n\n\nWhy\nThere are many reasons why it is essential to make your science reproducible and how the necessity of openness is a cornerstone of the integrity and efficacy of the scientific research process. Here we will also be focusing on why making your work reproducible will empower you to iterate quickly, integrate new information more easily to iterate quickly, scale your analysis to larger data sets, and better collaborate by receiving feedback and contributions from others, as well as enable your “future self” to reuse and build from your own work.\nTo make your data-riven research reproducible, it is important to develop scientific workflows that will be relying on programming to accomplish the necessary tasks to go from the raw data to the results (figures, new data, publications, …) of your analysis. Scripting languages, even better open ones, such as R and python, are well-suited for scientists to develop reproducible scientific workflows. Those scripting languages provide a large ecosystem of libraries (also referred to as packages or modules) that are ready to be leveraged to conduct analysis and modeling. In this course we will introduce how to use R, git and GitHub to develop such workflows as a team.\n\n\n\nFigure 1: Workflow example using the tidyverse. Note the program box around the workflow and the iterative nature of the analytical process described. Source: R for Data Science https://r4ds.had.co.nz/\n\n\n\nHow\nWe recommend shying away from spreadsheets as an analytical tool, as well as Graphical User Interfaces (GUI) where you need to click on buttons to do your analysis. Although convenient for data exploration, GUI will limit the reproducibility and the scalability of your analysis as human intervention is needed at every step. Spreadsheets can be useful to store tabular data, but it is recommended to script their analysis, as copy-pasting and references to cells are prone to mistake (see Reinhart and Rogof example. It is also very difficult to track changes and to scale your analysis using spreadsheets. In addition, auto-formatting (number, date, character, …) can silently introduce modifications to your data (e.g. One in five genetics papers contains errors thanks to Microsoft Excel ).\nScripting languages\nCompared to other programming languages (such as C, fortran, …), scripting languages are not required to be compiled to be executable. One consequence is that, generally, scripts will execute more slowly than a compiled executable program, because they need an interpreter. However, the more natural language oriented syntax of scripts make them easier to learn and use. In addition, numerous libraries are available to streamline scientific analysis.\nDon’t start coding without planning!\nIt is important to stress that scientists write scripts to help them to investigate scientific question(s). Therefore scripting should not drive our analysis and thinking. We strongly recommend you take the time to plan ahead all the steps you need to conduct your analysis. Developing such a scientific workflow will help you to narrow down the tasks that are needed to move forward your analysis.\nStructure of a script\nA script can be divided into several main sections. Each scripting language has its own syntax and style, but these main components are generally accepted:\nFrom the top to the bottom of your script:\nSummary explaining the purpose of the script\nAttribution: authors, contributors, date of last update, contact info\nImport of external modules / packages\nConstant definitions (g = 9.81)\nFunction definitions (ideally respecting the order in which they are called)\nMain code calling the different functions\nA few programming practices that will help a long way\nComment your code. This will allow you to inform your collaborators (but also your future self!) about the tasks your script accomplishes\nUse variables and constants instead of repeating values in different places of the code. This will let you update those values more easily\nChoose descriptive names for your variables and functions, not generic ones. If you store a list of files, do not use x for the variable name, use instead files. Even better use input_files if you are listing the files you are importing.\nBe consistent in terms of style (input_files, inputFiles,…) used to name variables and functions. Just pick one and stick to it!\nkeep it simple, stupid (KISS). Do not create overly complicated or nested statements. Break your tasks in several simple lines of code instead of embedding a lot of executions in one (complicated line). It will save you time while debugging and make your code more readable to others\nGo modular! Break down tasks into small code fragments such as functions or code chunks. It will make your code reusable for you and others (if well documented). Keep functions simple; they should only implement one or few (related) tasks\nDon’t Repeat Yourself (DRY). If you start copy/pasting part of your code changing a few parameters => write a function and call it several times with different parameters. Add flow control such as loops and conditions. It will be easier to debug, change and maintain\nTest your code. Test your code against values you would expect or computed with another software. Try hedge cases, such as NA, negative values, ….\nIterate with small steps, implement few changes at a time to your code. Test, fix, and move forward!\nWe hope this overview section about scientific programming has raised your interest in learning more about best practices and tools for developing reproducible workflows using scripting languages.\nFurther reading\nHere are a few selected publications to help you to learn more about these topics.\nData and scientific workflow management:\nSome Simple Guidelines for Effective Data Management:https://doi.org/10.1890/0012-9623-90.2.205\nBasic concepts of data management:https://www.dataone.org/education-modules\nGood enough practices in Scientific Computing:https://doi.org/10.1371/journal.pcbi.1005510\nScript your analysis:https://doi.org/10.1038/nj7638-563a\nPrinciples for data analysis workflows:https://doi.org/10.1371/journal.pcbi.1008770\n\nOpen Science:\nThe Tao of open science for ecology:https://doi.org/10.1890/ES14-00402.1\nChallenges and Opportunities of Open Data in Ecology:https://doi.org/10.1126/science.1197962\nScientific computing: Code alerthttps://doi.org/10.1038/nj7638-563a\nOur path to better science in less time using open data science toolshttps://doi.org/10.1038%2Fs41559-017-0160\nFAIR data guiding principleshttps://doi.org/10.1038/sdata.2016.18\nSkills and Knowledge for Data-Intensive Environmental Research https://doi.org/10.1093/biosci/bix025\nLet go your datahttps://doi.org/10.1038/s41563-019-0539-5\n\n",
      "last_modified": "2021-04-29T13:33:14-07:00"
    },
    {
      "path": "day_2.html",
      "title": "Scientific Coding as a Team",
      "author": [],
      "contents": "\n\nContents\nWhy\nHow\nCode review feedback\nPair programming\n\nA few more thoughts\nMore is not always better\nProject management\n\nTools\nVersion Control with git and GitHub\nLearning Objectives\nThe problem with save_as\ngit\nRepository\n\nGitHub\nLet’s look at a repository on GitHub\n\nHands-on\nOur asks\nPrompt\n\nFurther reading\n\n\nWhy\nEnvironmental Data Science (EDS), as many other data-driven research fields, requires a transdisciplinary approach to tackle challenges that often span across many domains of expertise. A team approach, gathering know-how from diverse collaborators, is therefore the most efficient way to tackle complex problems in EDS. Consequently collaborative skills are required to work effectively as a member of a team. No matter their focus, highly effective teams share certain characteristics:\nRight size\nDiverse group of people with the right mix of skills, knowledge, and competencies\nAligned purpose and incentives\nEffective organizational structure\nStrong individual contributions\nSupportive team processes and culture\nProgramming as part of a team is different than writing a script for your(present)self. However learning programming as part of a team is not only critical to the efficacy of your team, it will also you help you to grow as a programmer by:\nMotivating you to document well your work\nHelping you to think how to make your work reusable (by you and others)\nLearning to read others’ code to build on others’ work\nGain further knowledge in software development tools, such as version control\nDeveloping those skills will accelerate your research and open the door for you to contribute to open source projects.\nHow\nIt is important to acknowledge that there are many solutions to the complex research questions you will be facing in EDS. Each of those solutions will have several possible implementations, meaning that more likely you might code this implementation differently than your collaborators. Integrated software engineer teams generally try to mitigate this by developing coding standards and conventions that will guide how to write code and develop specific implementation. In scientific teams in which the collaboration is more loose and maybe more ephemeral as well, developing detailed coding standards will be too much of an overhead. However, we think it is important to acknowledge that coding style may varies among the data scientists of a project and it is a good discussion to have among the team at the beginning of the project. For example, in R it could be trying to use the tidyverse approach as much as possible. We also think there are two activities that will make the team more efficient: Code Review and Pair Programming.\nCode review feedback\nCode review is an asynchronous team activity. Despite its impressive name, code review should be seen by the person asking for the review (submitter) as a great opportunity to have one more pair of eyes looking at your code and providing feedback to make your code better. The “reviewer” should see this activity as a great way to learn from others.\nPair programming\nCode review is an synchronous team activity, where several programmers get to work together on the same piece of code. This is a great way to gain a better sense of what coding style people are using and better understand their way of solving challenges. It is also a great way to learn from each other. Generally, there is one Driver who is the person typing at the computer. The other role is called Navigator(s). The Navigator does not write code and focuses on finding solutions to the problem. Their use of computer should be limited to searching online for solutions.\nBasic principles & practices\nAdapted from Woody Zuill https://www.agileconnection.com/article/getting-started-mob-programming\nTreat each other with kindness, consideration, and respect - makes group work more fun and sustainable\nDriver/navigator pair programming adapted to work with the whole team - “For an idea to go from your head into the computer, it must go through someone else’s hands.” Speak at the highest level of abstraction that the driver (and the rest of the team) is able to digest at the moment\nTimed Rotation - 20-60 minutes. We don’t require that everyone take the driver role; it is everyone’s choice whether to do so\nWhole Team - every contributor to the project is an integral part of the whole team; when we don’t have the skills we need within the team, we find someone who does and invite them to work with us to accomplish the needed work\nReflect, Tune, and Adjust Frequently - based on agile principle: “At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.”\nTips and Tricks for Effective Team Programming\nAdapted from Corey Johannsen: https://blog.newrelic.com/2017/10/31/mob-programming-hurdles/\nSuggest, don’t dictate: Instead of telling the driver what to type into their editor, we explain what we’re trying to accomplish and then help the driver find the best solution. We’ve found that drivers learn better this way, and they don’t just end up feeling like a stenographer. Whenever possible, we ask questions that lead the driver to discover the answers on their own.\nStay focused and be present: Shut your laptop and put your phone away. I’ve struggled with following this guideline—we all have—and I recognize that the distraction almost always affects the rest of the mob. We tell all our mob members to be present, and if you can’t, it’s OK to leave until you can be.\nUse a timer, but be ready to pause it: We switch drivers every 20 - 60 minutes. However, we often wander off implementation into design discussions—it’s unavoidable—so this is when we pause the timer. This is another key guideline of our mob: the time you spend driving should be dedicated to writing the code that helps complete the task, not discussing design solutions.\nSet specific tasks for each session: When our mob gathers for a session, we first agree on and create a checklist of the tasks we are going to complete, and order them by priority on a whiteboard. This ensures we are all focused on the same task and keeps us moving forward. Additionally, this keeps us aligned with Minimal Marketable Feature (MMF) work, which we can communicate with our engineering and product managers to assure them we’re completing tasks that align with developing small, self-contained features that demonstrate immediate customer value.\nA few more thoughts\nMore is not always better\nAdding more analysts late into a project can be counterproductive (Brooks’ law)\nOvertime is not the solution as it will increase likeliness of errors and thus frustration. Try to focus on finding at what time of the day you are the most productive at coding instead\nProject management\nThis is a big topic and will be highly influeced by the team you are working with both in terms of practices and tools used to manage the project. On the coding side, there is a lot to borrow from Agile development approach for scientist. In a nutshell: “put it out there fast and iterate”. In other words to wait to try to have the percfect code or analaysis before sharing it with your collaborators. It is more efficenet to share and discuss an early / draft version, gather feedback and iterate.\nTools\nThe good news is there are several tools out there that have been designed to make developing code as a team more efficient. In this course, we will focus on getting familiar with the following:\nVersion control system: say goodbye to “save as”\nCode repository: where we share code and communicate ideas and feedback\nVersion Control with git and GitHub\nLearning Objectives\nIn this lesson, you will learn:\nWhy git is useful for reproducible analysis\nHow to use git to track changes to your work over time\nHow to use GitHub to collaborate with others\nHow to structure your commits so your changes are clear to others\nHow to write effective commit messages\nThe problem with save_as\n\n\n\nEvery file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when problems are discovered. Data files get combined together, then errors are fixed, and then they are split and combined again. In the course of a single analysis, one can expect thousands of changes to files. And yet, all we use to track this are simplistic filenames. You might think there is a better way, and you’d be right: version control.\nVersion control systems help you track all of the changes to your files, without the spaghetti mess that ensues from simple file renaming. In other words, version control is a system that helps you to manage the different versions of your files in an organized manner. It will help you to never have to duplicate files using save as as a way to keep different versions of a file (see below). Version control help you to create a timeline of snapshots containing the different versions of a file. At any point in time, you will be able to roll back to a specific version. Bonus: you can add a short description (commit message) to remember what each specific version is about.\nWhat is the difference between git and GitHub?\ngit: is a version control software used to track files in a folder (a repository)\ngit creates a timeline or history of your files\n\nGitHub: is a code repository in the cloud that enables users to store their git repositories and share them with others. Github also add many features to manage projects and document your work.\ngit\n\nThis training material focuses on the code versioning system called Git. Note that there are others, such as Mercurial or svn for example.\nGit is a free and open source distributed version control system. It has many functionalities and was originally geared towards software development and production environment. In fact, Git was initially designed and developed in 2005 by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel. Here is a fun video of Linus Torvalds touting Git to Google.\nHow does it work?\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nWhat git is not:\nGit is not a backup per se\nGit is not good at versioning large files (there are workarounds) => not meant for data\nRepository\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nAlthough there many ways to start a new repository, GitHub (or any other cloud solutions, such as GitLab) provide among the most convenient way of starting a repository.\n\nGitHub\nGitHub is a company that hosts git repositories online and provides several collaboration features (among which forking). GitHub fosters a great user community and has built a nice web interface to git, also adding great visualization/rendering capacities of your data.\nGitHub.com: https://github.com\nA user account: https://github.com/brunj7\nAn organization account: https://github.com/nceas\nNCEAS GitHub instance: https://github.nceas.ucsb.edu/\nLet’s look at a repository on GitHub\nThis screen shows the copy of a repository stored on GitHub, with its list of files, when the files and directories were last modified, and some information on who made the most recent changes.\n\nIf we drill into the “commits” for the repository, we can see the history of changes made to all of the files. Looks like kellijohnson and seananderson were fixing things in June and July:\n\nAnd finally, if we drill into the changes made on June 13, we can see exactly what was changed in each file:\n Tracking these changes, and seeing how they relate to released versions of software and files is exactly what Git and GitHub are good for. We will show how they can really be effective for tracking versions of scientific code, figures, and manuscripts to accomplish a reproducible workflow.\nHands-on\nIn this section we will be using the GitHub.com website and show you do not need to be a programmer to use version control and edit files on GitHub!\nOur asks\nAs a Team of two: - Help each other, everyone is bringing different skills! Talk it out! - Listen to each other; avoid judgment and solutioneering. - Have fun!\nPrompt\nPerson 1 (owner):\nCreate a (first) repository following these instructions steps 1-6\n\nPerson 2: Modify a file\nRefresh the web page\nClick on pen at the top of the README.md file\n\nReplace the title with something better!\nAdd your name and your favorite dessert below the title: e.g. -  Julien: crepes\nAdd a descriptive message\n - Commit your changes\n\n\n\nPerson 1: add a file\nDownload this csv file about your favorite desserts to your computer\nJust drag and drop it on the Github web page of your repository to upload it\nAdd a short message about the file e.g. Adding dessert csv\nClick on the filename to see it!\nBonus Person 2: Try to edit the csv file directly on GitHub!\nFurther reading\nCollaborative coding:\nA new grad’s guide to coding as a team - Atlassian: https://www.atlassian.com/blog/wp-content/uploads/HelloWorldEbook.pdf\n10 tips for efficient programming: https://www.devx.com/enterprise/top-10-tips-for-efficient-team-coding.html\nAgile Manifesto: https://moodle2019-20.ua.es/moodle/pluginfile.php/2213/mod_resource/content/2/agile-manifesto.pdf\nGit using RStudio:\nHappy Git and GitHub for the useR: http://happygitwithr.com/\nR packages - Git and GitHub: http://r-pkgs.had.co.nz/git.html#git-init\nGit mainly from the command line:\nInteractive git 101: https://try.github.io/\nVery good tutorial about git: https://www.atlassian.com/git/tutorials/what-is-version-control\nGit tutorial geared towards scientists: http://nyuccl.org/pages/gittutorial/\nShort intro to git basics: https://github.com/mbjones/gitbasics\nGit documentation about the basics: http://gitref.org/basic/\nGit documentation - the basics: https://git-scm.com/book/en/v2/Getting-Started-Git-Basics\nGit terminology: https://www.atlassian.com/git/glossary/terminology\nIn trouble, guide to know what to do: http://justinhileman.info/article/git-pretty/git-pretty.png\nWant to undo something? https://github.com/blog/2019-how-to-undo-almost-anything-with-git\nGit terminology: https://www.atlassian.com/git/glossary/terminology\n8 tips to work better with git: https://about.gitlab.com/2015/02/19/8-tips-to-help-you-work-better-with-git/\nGitPro book (2nd edition): https://git-scm.com/book/en/v2\n\n\n\n",
      "last_modified": "2021-04-29T13:33:15-07:00"
    },
    {
      "path": "day_3.html",
      "title": "Collaborative coding",
      "author": [],
      "contents": "\n\nContents\nCollaborative Workflows with GitHub\nCollaborating through Forking, aka the GitHub workflow\nCollaborating through write / push access\n\nBranches\nWorking with branches\nCreating a new branch\nUsing a branch\n\nFurther reading\n\n\nCollaborative Workflows with GitHub\nCollaborating through Forking, aka the GitHub workflow\nA fork is a copy of a repository that will be stored under your user account. Forking a repository allows you to freely experiment with changes without affecting the original project. We can create a fork on Github by clicking the “fork” button in the top right corner of our repository web page. \nMost commonly, forks are used to either propose changes to someone else’s project or to use someone else’s project as a starting point for your own idea.\nWhen you are satisfied with your work, you can initiate a Pull Request to initiate discussion about your modifications and requesting to integrate your changes to the main repository. Your commit history allows the original repository administrators to see exactly what changes would be merged if they accept your request. Do this by going to the original repository and clicking the “New pull request” button\nNext, click “compare across forks”, and use the dropdown menus to select your fork as the “head fork” and the original repository as the “base fork”.\nThen type a title and description for the changes you would like to make. By using GitHub’s @mention syntax in your Pull Request message, you can ask for feedback from specific people or teams.\nThis workflow is recommended when you do not have push/write access to a repository, such as contributing to a open source software or R package, or if you are heavily changing a project.\nCollaborating through write / push access\nWhen you collaborate closely and actively with colleagues, you do not want necessarily to have to review all their changes through pull requests. You can then give them write access (git push) to your repository to allow them to directly edit and contribute to its content. This is the workflow we will recommend to use within your working group.\nAdding collaborators to a repository\nClick on the repository\nOn the right panel, click \nOn the left pane, click Collaborators and enter the usernames you want to add\nUnder this collaborative workflow, we recommend to use git branches combined with pull requests to avoid conflicts and to track and discuss collaborators contributions.\nBranches\nadapted from https://www.atlassian.com/git/tutorials/git-mergeWhat are branches? Well in fact nothing new, as the master is a branch. A branch represents an independent line of development, parallel to the master (branch).\nWhy should you use branches? For 2 main reasons:\nWe want the master to only keep a version of the code that is working\nWe want to version the code we are developing to add/test new features (for now we mostly talk about feature branch) in our script without altering the version on the master.\nWorking with branches\nCreating a new branch\nIn RStudio, you can create a branch using the git tab.\nClick on the branch button\n\n\nFill the branch name in the new branch window; in this example, we are going to use test for the name; leave the other options as default and click create\n\n\nyou will be directly creating a local and remote branch and switch to it\n\n\nCongratulations you just created your first branch!\nLet us check on Github:\n\n\n\nAs you can see, now there are two branches on our remote repository: - master - test\nUsing a branch\nHere there is nothing new. The workflow is exactly the same as we did before, except our commits will be created on the test branch instead of the master branch.\nFurther reading\nGitHub Workflow:\nGitHub:\nguides on how to use GitHub: https://guides.github.com/\nGitHub from RStudio: http://r-pkgs.had.co.nz/git.html#git-pull\n\nForking:\nhttps://help.github.com/articles/fork-a-repo/\nhttps://guides.github.com/activities/forking/\n\nComparison of git repository host services: https://www.git-tower.com/blog/git-hosting-services-compared/\nBranches\ninteractive tutorial on branches: http://learngitbranching.js.org/\nusing git in a collaborative environment: https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow https://moodle2019-20.ua.es/moodle/pluginfile.php/2213/mod_resource/content/2/agile-manifesto.pdf\n\n",
      "last_modified": "2021-04-29T13:33:15-07:00"
    },
    {
      "path": "day_4.html",
      "title": "Topic 4: Change the theme",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_4.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nThe bells and whistles of this MEDS template (colors, fonts, spacing, etc.) are customized in the theme.css file in your Project root.\nIf you love css or want to make changes, you’re encouraged to customize your site! There is minor annotation in the css file, but honestly this will probably just take quite a bit of Inspect Element to figure out what to change.\nFonts: If you specifically want to know how to change the site fonts, see here.\n\n\n\n",
      "last_modified": "2021-04-29T13:33:16-07:00"
    },
    {
      "path": "day_5.html",
      "title": "Topic 5: Basic formatting",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_5.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nIf you’re familiar with markdown, use standard syntax to update font styles, add bulleted lists, subscripts/superscripts, etc. (or learn more from the R Markdown cheatsheet).\nIf you’re not familiar with markdown and want an easier way to update formatting, there is a Visual Editor in RStudio versions > 1.4. It is absolutely worth it to check it out for easier formatting of text, images, tables, citations, and more. Read more about the new RStudio Visual Editor here.\n\n\n\n",
      "last_modified": "2021-04-29T13:33:16-07:00"
    },
    {
      "path": "index.html",
      "title": "EDS 214: Analytical Workflows and Scientific Reproducibility",
      "description": "This course will introduce students to conceptual organization of workflows as a way to conduct reproducible analyses",
      "author": [],
      "contents": "\n\nContents\nCourse description\nTeaching team\nImportant links\nPredictable daily schedule\nLearning objectives\nCourse requirements\nComputing\nTextbook\nOther requirements\n\nTentative topics\n\n\n\n\nFigure 1: Workflow example using the tidyverse. Note the program box around the workflow and the iterative nature of the analytical process described. Source: R for Data Science https://r4ds.had.co.nz/\n\n\n\nCourse description\nThe generation and analysis of environmental data is often a complex, multi-step process that may involve the collaboration of many people. Increasingly tools that document help to organize and document workflows are being used to ensure reproducibility and transparency of the results. This course will introduce students to conceptual organization of workflows as a way to conduct reproducible analyses, as well as various software tools that help users to manage multi-step processes that requires tools for storing, managing and sharing workflows, code, documents and data.\nTeaching team\nInstructor: Mike Wazowski (wazowski@monstersinc.org)\nOffice: Closet 100\nOffice hours: Friday 9pm - 11pm\nTeaching assistant: Boo (boo@monstersinc.org)\nOffice: Boo’s Room\nOffice hours: Saturday 7am - 8am\nImportant links\nLink to full course syllabus (here is the MEDS optional syllabus template)\nLink to Code of Conduct (Bren / UCSB)\nLink to course GitHub Classroom, other essential resources\nPredictable daily schedule\nCourse dates: Monday (2021-08-02) - Friday (2021-08-06)\nEDS 214 is an intensive 1-week long 2-unit course. Students should plan to attend all scheduled sessions. All course requirements will be completed between 8am and 5pm PST (M - F), i.e. you are not expected to do additional work for EDS 214 outside of those hours, unless you are working with the Teaching Assistant in student hours.\nTentative daily schedule (subject to change):\nTime (PST)\nActivity\n8:00am - 9:00am\nLecture 1 (60 min)\n9:00am - 9:15am\nBreak 1 (15 min)\n9:15am - 10:15am\nInteractive Session 1 (60 min)\n10:15am - 11:00am\nFlex time (45 min)\n11:00am - 12:15pm\nBreak 2 (75 min)\n12:15pm - 1:15pm\nLecture 2 (60 min)\n1:15pm - 2:15pm\nInteractive Session 2 (60 min)\n2:15pm - 3:15pm\nFlex time (60 min)\n3:15pm - 5:00pm\nInteractive Session 3: Group & challenge tasks (105 min)\nLearning objectives\nThe goal of EDS 214 (Analytical Workflows and Scientific Reproducibility) is to expose incoming MEDS students to “good enough” practices of scientific programming develop skills in environmental data science to produce reproducible research. By the end of the course, students should be able to:\nDevelop knowledge in scientific analytical workflows To learn how to make your data-riven research reproducible, it is important to develop scientific workflows that will be relying on programming to accomplish the necessary tasks to go from the raw data to the results of your analysis (figures, new data, publications, …). Scripting languages, even better open ones such as R and python, are well-suited for scientists to develop reproducible scientific workflows, but are not the only tools you will need to develop reproducible and collaborative workflows\nLearn how to code in a collaborative manner by practicing techniques such as code review and pair programming. Become comfortable asking for and conducting code review using git and GitHub to create pull request, ask feedback from peers, and merge changes into the main repository. Practice pair programming to cement the collaborative development of reproducible analytical workflows\nPractice documenting code and data in a systematic way that will enable your collaborators, including your future self, to understand and reuse your work\nCourse requirements\nComputing\nMinimum MEDS device requirements (bring to all sessions)\nHave a ready to be used GitHub Account (https://github.com/)\nTextbook\nRequired textbook / information\nOther requirements\nAnything else\nImportant for students to know\nTentative topics\nDay\nLecture topics\nLab topics\n1\nReproducible Workflows\nWriting pseudo code\n2\nCoding as a Team\ngit & GitHub\n3\nCode Review & Pair Programming\nForking & Pull request\n4\nDocumenting things\nHow to document your work\n5\nManaging your code and data\nWorking on a remote server\n\n\n\n",
      "last_modified": "2021-04-29T13:33:18-07:00"
    },
    {
      "path": "resources.html",
      "title": "Course resources",
      "author": [],
      "contents": "\n\nContents\nMore on distill\n\n\nTO UPDATE THIS PAGE: Open and edit the resources.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nMore on distill\nRStudio’s distill website\nInspiration and examples from the distillery\n\n\n\n",
      "last_modified": "2021-04-29T13:33:18-07:00"
    }
  ],
  "collections": []
}
