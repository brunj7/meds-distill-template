{
  "articles": [
    {
      "path": "assignments.html",
      "title": "Assignments",
      "author": [],
      "contents": "\n\nContents\nAssignment materials and dates\nAssignment expectations and grading\n\n\n\nTO UPDATE THIS PAGE: Open and edit the assignments.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nAssignment materials and dates\nAssignment materials\nAssigned\nDue date\nA link to the repo\n2021-01-01\n2021-01-08\nA link to the repo\n2021-01-15\n2021-01-23\nA link to the repo\n2021-02-01\n2021-02-09\nA link to the repo\n2021-02-14\n2021-02-23\nAssignment expectations and grading\nThis might also go on the home page & in syllabus\nOr could reinforce here\n\n\n\n\n",
      "last_modified": "2021-04-28T17:11:44-07:00"
    },
    {
      "path": "day_1.html",
      "title": "Scientific programming for reproducible research",
      "author": [],
      "contents": "\n\nContents\nWhy\nHow\nScripting languages\n\n\nWhy\nThis section is an overview of skills and tools that will enable you to collaborate in a reproducible manner. There are many reasons why it is essential to make your science reproducible and how the necessity of openness is a cornerstone of the integrity and efficacy of the scientific research process. Here we will be focusing on why making your work reproducible will empower you to iterate quickly, integrate new information more easily, scale your analysis to larger data sets, and better collaborate by receiving feedback and contributions from others, as well as enable your “future self” to reuse and build from your own work.\nTo make your data-riven research reproducible, it is important to develop scientific workflows that will be relying on programming to accomplish the necessary tasks to go from the raw data to the results (figures, new data, publications, …) of your analysis. Scripting languages, even better open ones such as R and python, are well-suited for scientists to develop reproducible scientific workflows. Those scripting languages provide a large ecosystem of libraries (also referred to as packages or modules) that are ready to be leveraged to conduct analysis and modeling. The [Reproducible Research Techniques][Reproducible Research Techniques - Data Training] chapter of this onboarding document will introduce how to use R to develop such workflows.\n\n\n\nFigure 1: Workflow example using the tidyverse. Note the program box around the workflow and the iterative nature of the analytical process described. Source: R for Data Science https://r4ds.had.co.nz/\n\n\n\nHow\nWe recommend shying away from spreadsheets as an analytical tool, as well as Graphical User Interfaces (GUI) where you need to click on buttons to do your analysis. Although convenient for data exploration, GUI will limit the reproducibility and the scalability of your analysis as human intervention is needed at every step. Spreadsheets can be useful to store tabular data, but it is recommended to script their analysis, as copy-pasting and references to cells are prone to mistake (see Reinhart and Rogof example. It is also very difficult to track changes and to scale your analysis using spreadsheets. In addition, auto-formatting (number, date, character, …) can silently introduce modifications to your data (e.g. One in five genetics papers contains errors thanks to Microsoft Excel ).\nScripting languages\nCompared to other programming languages (such as C, fortran, …), scripting languages are not required to be compiled to be executable. One consequence is that, generally, scripts will execute more slowly than a compiled executable program, because they need an interpreter. However, the more natural language oriented syntax of scripts make them easier to learn and use. In addition, numerous libraries are available to streamline scientific analysis.\nDon’t start coding without planning!\nIt is important to stress that scientists write scripts to help them to investigate scientific question(s). Therefore scripting should not drive our analysis and thinking. We strongly recommend you take the time to plan ahead all the steps you need to conduct your analysis. Developing such a scientific workflow will help you to narrow down the tasks that are needed to move forward your analysis.\nStructure of a script\nA script can be divided into several main sections. Each scripting language has its own syntax and style, but these main components are generally accepted:\nFrom the top to the bottom of your script:\nSummary explaining the purpose of the script\nAttribution: authors, contributors, date of last update, contact info\nImport of external modules / packages\nConstant definitions (g = 9.81)\nFunction definitions (ideally respecting the order in which they are called)\nMain code calling the different functions\nA few programming practices that will help a long way\nComment your code. This will allow you to inform your collaborators (but also your future self!) about the tasks your script accomplishes\nUse variables and constants instead of repeating values in different places of the code. This will let you update those values more easily\nChoose descriptive names for your variables and functions, not generic ones. If you store a list of files, do not use x for the variable name, use instead files. Even better use input_files if you are listing the files you are importing.\nBe consistent in terms of style (input_files, inputFiles,…) used to name variables and functions. Just pick one and stick to it!\nkeep it simple, stupid (KISS). Do not create overly complicated or nested statements. Break your tasks in several simple lines of code instead of embedding a lot of executions in one (complicated line). It will save you time while debugging and make your code more readable to others\nGo modular! Break down tasks into small code fragments such as functions or code chunks. It will make your code reusable for you and others (if well documented). Keep functions simple; they should only implement one or few (related) tasks\nDon’t Repeat Yourself (DRY). If you start copy/pasting part of your code changing a few parameters => write a function and call it several times with different parameters. Add flow control such as loops and conditions. It will be easier to debug, change and maintain\nTest your code. Test your code against values you would expect or computed with another software. Try hedge cases, such as NA, negative values, ….\nIterate with small steps, implement few changes at a time to your code. Test, fix, and move forward!\nWe hope this overview section about scientific programming has raised your interest in learning more about best practices and tools for developing reproducible workflows using scripting languages.\n\n\n\n",
      "last_modified": "2021-04-28T17:11:45-07:00"
    },
    {
      "path": "day_2.html",
      "title": "Tools: Version Control and Code Repository",
      "author": [],
      "contents": "\n\nContents\nVersion Control with git and GitHub\nLearning Objectives\nThe problem with save_as\ngit\nRepository\n\nGitHub\nLet’s look at a repository on GitHub\n\nHands-on\nOur asks\nPrompt\n\n\n\nVersion Control with git and GitHub\nLearning Objectives\nIn this lesson, you will learn:\nWhy git is useful for reproducible analysis\nHow to use git to track changes to your work over time\nHow to use GitHub to collaborate with others\nHow to structure your commits so your changes are clear to others\nHow to write effective commit messages\nThe problem with save_as\n\n\n\nEvery file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when problems are discovered. Data files get combined together, then errors are fixed, and then they are split and combined again. In the course of a single analysis, one can expect thousands of changes to files. And yet, all we use to track this are simplistic filenames. You might think there is a better way, and you’d be right: version control.\nVersion control systems help you track all of the changes to your files, without the spaghetti mess that ensues from simple file renaming. In other words, version control is a system that helps you to manage the different versions of your files in an organized manner. It will help you to never have to duplicate files using save as as a way to keep different versions of a file (see below). Version control help you to create a timeline of snapshots containing the different versions of a file. At any point in time, you will be able to roll back to a specific version. Bonus: you can add a short description (commit message) to remember what each specific version is about.\nWhat is the difference between git and GitHub?\ngit: is a version control software used to track files in a folder (a repository)\ngit creates a timeline or history of your files\n\nGitHub: is a code repository in the cloud that enables users to store their git repositories and share them with others. Github also add many features to manage projects and document your work.\ngit\n\nThis training material focuses on the code versioning system called Git. Note that there are others, such as Mercurial or svn for example.\nGit is a free and open source distributed version control system. It has many functionalities and was originally geared towards software development and production environment. In fact, Git was initially designed and developed in 2005 by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel. Here is a fun video of Linus Torvalds touting Git to Google.\nHow does it work?\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nWhat git is not:\nGit is not a backup per se\nGit is not good at versioning large files (there are workarounds) => not meant for data\nRepository\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nAlthough there many ways to start a new repository, GitHub (or any other cloud solutions, such as GitLab) provide among the most convenient way of starting a repository.\n\nGitHub\nGitHub is a company that hosts git repositories online and provides several collaboration features (among which forking). GitHub fosters a great user community and has built a nice web interface to git, also adding great visualization/rendering capacities of your data.\nGitHub.com: https://github.com\nA user account: https://github.com/brunj7\nAn organization account: https://github.com/nceas\nNCEAS GitHub instance: https://github.nceas.ucsb.edu/\nLet’s look at a repository on GitHub\nThis screen shows the copy of a repository stored on GitHub, with its list of files, when the files and directories were last modified, and some information on who made the most recent changes.\n\nIf we drill into the “commits” for the repository, we can see the history of changes made to all of the files. Looks like kellijohnson and seananderson were fixing things in June and July:\n\nAnd finally, if we drill into the changes made on June 13, we can see exactly what was changed in each file:\n Tracking these changes, and seeing how they relate to released versions of software and files is exactly what Git and GitHub are good for. We will show how they can really be effective for tracking versions of scientific code, figures, and manuscripts to accomplish a reproducible workflow.\nHands-on\nIn this section we will be using the GitHub.com website and show you do not need to be a programmer to use version control and edit files on GitHub!\nOur asks\nAs a Team of two: - Help each other, everyone is bringing different skills! Talk it out! - Listen to each other; avoid judgment and solutioneering. - Have fun!\nPrompt\nPerson 1 (owner):\nCreate a (first) repository following these instructions steps 1-6\n\nPerson 2: Modify a file\nRefresh the webpage\nClick on pen at the top of the README.md file\n\nReplace the title with something better! (don’t rename it)\nAdd your name and your favorite dessert below the title: e.g. -  Julien: crepes\nAdd a descriptive message\n - Commit your changes\n\n\n\nPerson 1: add a file\nDownload this csv file about your favorite desserts to your computer\nJust drag and dropit on the Github webapge of your repository to upload it\nAdd a short message about the file e.g. Adding dessert csv\nClick on the filename to see it!\nBonus Person 2: Try to edit the csv file directly on GitHub!\n\n\n\n",
      "last_modified": "2021-04-28T17:11:45-07:00"
    },
    {
      "path": "day_3.html",
      "title": "Scientific Coding as a Team",
      "author": [],
      "contents": "\n\nContents\nWhy\nHow\nAsynchronous\nSynchronous\n\nA few more thoughts\nMore is not always better\nProject management\nTools\n\nFurther reading\n\nWhy\nHow\nAsynchronous\nCode review feedback\nSynchronous\nPair programming\nGet a better sense of what coding standard the programmer should use\nA few more thoughts\nMore is not always better\nAdding People when late can be counterproductive (Brooks’ law)\nOvertime is not the solution\nProject management\nAgile: put it out there fast and iterate\nTools\nVersion control system: say goodbye to “save as”\nCode repository: where we share code and communicate ideas and feedback\nUnit testing: checks that the code is still doing what it is supposed to do\nFurther reading\nA new grad’s guide to coding as a team - Atlassian: https://www.atlassian.com/blog/wp-content/uploads/HelloWorldEbook.pdf\n10 tips for efficient programming: https://www.devx.com/enterprise/top-10-tips-for-efficient-team-coding.html\nAgile Manifesto: https://moodle2019-20.ua.es/moodle/pluginfile.php/2213/mod_resource/content/2/agile-manifesto.pdf\n\n\n\n",
      "last_modified": "2021-04-28T17:11:46-07:00"
    },
    {
      "path": "day_4.html",
      "title": "Topic 4: Change the theme",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_4.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nThe bells and whistles of this MEDS template (colors, fonts, spacing, etc.) are customized in the theme.css file in your Project root.\nIf you love css or want to make changes, you’re encouraged to customize your site! There is minor annotation in the css file, but honestly this will probably just take quite a bit of Inspect Element to figure out what to change.\nFonts: If you specifically want to know how to change the site fonts, see here.\n\n\n\n",
      "last_modified": "2021-04-28T17:11:46-07:00"
    },
    {
      "path": "day_5.html",
      "title": "Topic 5: Basic formatting",
      "author": [],
      "contents": "\n\nTO UPDATE THIS PAGE: Open and edit the topic_5.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nIf you’re familiar with markdown, use standard syntax to update font styles, add bulleted lists, subscripts/superscripts, etc. (or learn more from the R Markdown cheatsheet).\nIf you’re not familiar with markdown and want an easier way to update formatting, there is a Visual Editor in RStudio versions > 1.4. It is absolutely worth it to check it out for easier formatting of text, images, tables, citations, and more. Read more about the new RStudio Visual Editor here.\n\n\n\n",
      "last_modified": "2021-04-28T17:11:47-07:00"
    },
    {
      "path": "index.html",
      "title": "EDS 214: Analytical Workflows and Scientific Reproducibility",
      "description": "This course will introduce students to conceptual organization of workflows as a way to conduct reproducible analyses",
      "author": [],
      "contents": "\n\nContents\nCourse description\nTeaching team\nImportant links\nPredictable daily schedule\nLearning objectives\nCourse requirements\nComputing\nTextbook\nOther requirements\n\nTentative topics\n\n\n\n\nFigure 1: Workflow example using the tidyverse. Note the program box around the workflow and the iterative nature of the analytical process described. Source: R for Data Science https://r4ds.had.co.nz/\n\n\n\nCourse description\nThe generation and analysis of environmental data is often a complex, multi-step process that may involve the collaboration of many people. Increasingly tools that document help to organize and document workflows are being used to ensure reproducibility and transparency of the results. This course will introduce students to conceptual organization of workflows as a way to conduct reproducible analyses, as well as various software tools that help users to manage multi-step processes that requires tools for storing, managing and sharing workflows, code, documents and data.\nTeaching team\nInstructor: Mike Wazowski (wazowski@monstersinc.org)\nOffice: Closet 100\nOffice hours: Friday 9pm - 11pm\nTeaching assistant: Boo (boo@monstersinc.org)\nOffice: Boo’s Room\nOffice hours: Saturday 7am - 8am\nImportant links\nLink to full course syllabus (here is the MEDS optional syllabus template)\nLink to Code of Conduct (Bren / UCSB)\nLink to course GitHub Classroom, other essential resources\nPredictable daily schedule\nCourse dates: Monday (2021-08-02) - Friday (2021-08-06)\nEDS 212 is an intensive 1-week long 2-unit course. Students should plan to attend all scheduled sessions. All course requirements will be completed between 8am and 5pm PST (M - F), i.e. you are not expected to do additional work for EDS 212 outside of those hours, unless you are working with the Teaching Assistant in student hours.\nTentative daily schedule (subject to change):\nTime (PST)\nActivity\n8:00am - 9:00am\nLecture 1 (60 min)\n9:00am - 9:15am\nBreak 1 (15 min)\n9:15am - 10:15am\nInteractive Session 1 (60 min)\n10:15am - 11:00am\nFlex time (45 min)\n11:00am - 12:15pm\nBreak 2 (75 min)\n12:15pm - 1:15pm\nLecture 2 (60 min)\n1:15pm - 2:15pm\nInteractive Session 2 (60 min)\n2:15pm - 3:15pm\nFlex time (60 min)\n3:15pm - 5:00pm\nInteractive Session 3: Group & challenge tasks (105 min)\nLearning objectives\nThe goal of EDS 214 (Analytical Workflows and Scientific Reproducibility) is to expose incoming MEDS students to “good enough” practices of scientific programmingto develop skills in environmental data science to produce reproducible research. By the end of the course, students should be able to:\nDevelop knowledge in scientific analytical workflows To learn how to make your data-riven research reproducible, it is important to develop scientific workflows that will be relying on programming to accomplish the necessary tasks to go from the raw data to the results of your analysis (figures, new data, publications, …). Scripting languages, even better open ones such as R and python, are well-suited for scientists to develop reproducible scientific workflows, but are not the only tools you will need to develop reproducible and collaborative workflows\nLearn how to code in a collaborative manner for how all topics in EDS 212 are useful and used in applied environmental data science\nBeing comfortable asking for and conducting code review using git and GitHub to create pull request, ask for feedback from peers, and merge changes into the main repository\nWork with peers to solve group tasks, then communicate the process of problem solving to the rest of the class\nCourse requirements\nComputing\nMinimum MEDS device requirements (bring to all sessions)\nHave a ready to be used GitHub Account (https://github.com/)\nTextbook\nRequired textbook / information\nOther requirements\nAnything else\nImportant for students to know\nTentative topics\nDay\nLecture topics\nLab topics\n1\nReproducible Workflows\nWriting pseudo code\n2\nVersion Control\ngit & GitHub\n3\nCode Review Feedback\nForking & Pull request\n4\nPair Programming\nPractice Driver and Navigator roles\n5\nDocumenting things\nHow to write documentation\n\n\n\n",
      "last_modified": "2021-04-28T17:11:49-07:00"
    },
    {
      "path": "resources.html",
      "title": "Course resources",
      "author": [],
      "contents": "\n\nContents\nMore on distill\n\n\nTO UPDATE THIS PAGE: Open and edit the resources.Rmd file, in the project root, to delete this placeholder text and customize with your own!\n\nMore on distill\nRStudio’s distill website\nInspiration and examples from the distillery\n\n\n\n",
      "last_modified": "2021-04-28T17:11:49-07:00"
    }
  ],
  "collections": []
}
